package com.jmr.obdx.domain;
// Generated Jan 12, 2017 11:08:44 AM by Hibernate Tools 4.3.1


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Mstcurrency generated by hbm2java
 */
@Entity
@Table(name="MSTCURRENCY"
    ,schema="FCDBADMIN_RK"
)
public class Mstcurrency  implements java.io.Serializable {


     private MstcurrencyId id;
     private String namcurrency;
     private String codcurrency;
     private Date dtime;
     private BigDecimal slno;
     private Character islocal;
     private Set<FcatTMstfxrate> fcatTMstfxratesForFkFcatTMstfxrateCodcur = new HashSet<FcatTMstfxrate>(0);
     private Set<FcatTMstfxrate> fcatTMstfxratesForFk2FcatTMstfxrate = new HashSet<FcatTMstfxrate>(0);

    public Mstcurrency() {
    }

	
    public Mstcurrency(MstcurrencyId id) {
        this.id = id;
    }
    public Mstcurrency(MstcurrencyId id, String namcurrency, String codcurrency, Date dtime, BigDecimal slno, Character islocal, Set<FcatTMstfxrate> fcatTMstfxratesForFkFcatTMstfxrateCodcur, Set<FcatTMstfxrate> fcatTMstfxratesForFk2FcatTMstfxrate) {
       this.id = id;
       this.namcurrency = namcurrency;
       this.codcurrency = codcurrency;
       this.dtime = dtime;
       this.slno = slno;
       this.islocal = islocal;
       this.fcatTMstfxratesForFkFcatTMstfxrateCodcur = fcatTMstfxratesForFkFcatTMstfxrateCodcur;
       this.fcatTMstfxratesForFk2FcatTMstfxrate = fcatTMstfxratesForFk2FcatTMstfxrate;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="idEntity", column=@Column(name="ID_ENTITY", nullable=false, length=5) ), 
        @AttributeOverride(name="namccyshrt", column=@Column(name="NAMCCYSHRT", nullable=false, length=3) ) } )
    public MstcurrencyId getId() {
        return this.id;
    }
    
    public void setId(MstcurrencyId id) {
        this.id = id;
    }

    
    @Column(name="NAMCURRENCY", length=120)
    public String getNamcurrency() {
        return this.namcurrency;
    }
    
    public void setNamcurrency(String namcurrency) {
        this.namcurrency = namcurrency;
    }

    
    @Column(name="CODCURRENCY", length=3)
    public String getCodcurrency() {
        return this.codcurrency;
    }
    
    public void setCodcurrency(String codcurrency) {
        this.codcurrency = codcurrency;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="DTIME", length=7)
    public Date getDtime() {
        return this.dtime;
    }
    
    public void setDtime(Date dtime) {
        this.dtime = dtime;
    }

    
    @Column(name="SLNO", precision=22, scale=0)
    public BigDecimal getSlno() {
        return this.slno;
    }
    
    public void setSlno(BigDecimal slno) {
        this.slno = slno;
    }

    
    @Column(name="ISLOCAL", length=1)
    public Character getIslocal() {
        return this.islocal;
    }
    
    public void setIslocal(Character islocal) {
        this.islocal = islocal;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="mstcurrencyByFkFcatTMstfxrateCodcur")
    public Set<FcatTMstfxrate> getFcatTMstfxratesForFkFcatTMstfxrateCodcur() {
        return this.fcatTMstfxratesForFkFcatTMstfxrateCodcur;
    }
    
    public void setFcatTMstfxratesForFkFcatTMstfxrateCodcur(Set<FcatTMstfxrate> fcatTMstfxratesForFkFcatTMstfxrateCodcur) {
        this.fcatTMstfxratesForFkFcatTMstfxrateCodcur = fcatTMstfxratesForFkFcatTMstfxrateCodcur;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="mstcurrencyByFk2FcatTMstfxrate")
    public Set<FcatTMstfxrate> getFcatTMstfxratesForFk2FcatTMstfxrate() {
        return this.fcatTMstfxratesForFk2FcatTMstfxrate;
    }
    
    public void setFcatTMstfxratesForFk2FcatTMstfxrate(Set<FcatTMstfxrate> fcatTMstfxratesForFk2FcatTMstfxrate) {
        this.fcatTMstfxratesForFk2FcatTMstfxrate = fcatTMstfxratesForFk2FcatTMstfxrate;
    }




}


